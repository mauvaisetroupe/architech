@startuml
LandscapeView "1" *-down- "n" FunctionalFlow
note on link #White
     A landscape is composed 
     of FunctionalFlows
end note
FunctionalFlow "1" *-left- "n" FunctionalFlowStep  : \t\t\t\t
note on link #White
  A Functional 
  Flow is a 
  list of steps 
end note
FunctionalFlowStep "n" --* "1" Interface
DataFlow "n" -left-o "1" Interface : \t\t\t\t
note on link #White 
   auto detection
   is to privilege
end note   
DataFlow "1" o-down- "n" DataFlowItem
note on link #White 
   auto detection
   is to privilege
end note   
DataFlow "n" -up-o "n" FunctionalFlow
note on link #White
   this relationship 
   could be complex to maintain 
end note   
Interface "n" o-- "2" Application : source, target
Interface "n" o-- "2" ApplicationComponent : source, target

Application "1" o-right- "n" ApplicationComponent : \t\t\t



Class LandscapeView {
   String diagramName 
   String owner
}
note left of LandscapeView
  LanscapeView is a diagram that represents a set 
  of applications and flows between these applications.
  
  The name 'view' come from in TOGAF vocabulary
  A view responds to a template (viewpoint)
end note 

Class FunctionalFlow {
   String alias
   String description
   String comment
   String status
	Interface interfaces
}
note right of FunctionalFlow
  In the context of a LandscapeView,
  a FunctionalFlow represents a functional 
  information exchange between two or 
  more applications
  
end note 

Class FunctionalFlowStep {
   String description
   int stepOrder
}

note left of FunctionalFlowStep
  Each step leverages on an 
  <b>Inteface</b> to transfer 
  information between 
  applications.
end note

Class Interface {
   Application source
   Application target
   String protocol
   String status
   String owner
}
note left of Interface
   Interface is a "pipeleline" between 
   a source and a target <b>Application</b>
   (or Component) via a protocol 
   (API, Files, Events)
end note


Class Application {
   String name
   String description
   String comment
   String type
   String owner
   String technology
}

Class ApplicationComponent {
   String name
   String description
   String comment
   String type
   String owner
   String technology
}


Class DataFlow {
    frequency Frequency
    format Format
    type FlowType
    description String
    resourceName String
    contractURL String
    documentationURL String
}


note right of DataFlow
  Data Flow is the data going through the 
  <b>Interface</b> pipeline in the context 
  of one or more <b>Functional Flow</b>
  
  DataFlow is a <b>File</b>, an <b>Event-Topic</b> 
  or an <b>API</b>
end note 


Class DataFlowItem {
   String name
   String xsdURL
}

note right of DataFlowItem
   When DataFlow is of type Event-Topic, 
   we need a additional object to model a 
   specific Event in a Topic
end note
@enduml